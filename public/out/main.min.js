"use strict";

(() => {
  "use strict";

  const e = "savedTracks",
    t = {
      loginTxt: document.querySelector(".nav-auth__text"),
      formEl: document.querySelector(".nav-form__post"),
      inputEl: document.querySelector(".nav-form__input"),
      loginBtn: document.querySelector(".nav-auth__link"),
      listEl: document.querySelector(".main__list"),
      spinEl: document.querySelector(".main__spin"),
      spinBackEl: document.querySelector(".main__spin-backdrop")
    };
  function n(n) {
    null !== n && t.spinEl.classList.add("visually-hidden"), console.log("tracksObj:", n);
    const a = n?.tracks?.items || n?.items || n?.tracks || [];
    let o = t.listEl;
    o.innerHTML = "", a.forEach((t, n) => {
      const a = document.createElement("li"),
        l = document.createElement("span"),
        i = document.createElement("img"),
        c = document.createElement("a");
      l.classList.add("main__span"), a.classList.add("main__item"), i.classList.add("main__img"), c.classList.add("main__link"), i.src = t.album.images[1]?.url || t.album.images[0]?.url || "", i.alt = t.album.name, c.href = t.external_urls.spotify, c.target = "_blank", c.rel = "noopener noreferrer nofollow", c.textContent = `${t.name} - ${t.artists[0].name}`, l.textContent = "click", o.appendChild(a), c.appendChild(l), a.appendChild(i), a.appendChild(c), (t => {
        const n = JSON.parse(localStorage.getItem(e)) || [];
        n.some(e => e.id === t.id) || (n.push(t), localStorage.setItem(e, JSON.stringify(n)));
      })(t);
    });
  }
  function a() {
    const e = localStorage.getItem("_login");
    let n = "";
    n = window.innerWidth <= 100 || window.innerWidth <= 800 ? "" : "true" === e ? "Logged" : window.innerWidth <= 1400 ? "Login" : "Login with Twitch", t.loginTxt.textContent = n;
  }
  const o = JSON.parse(localStorage.getItem(e)) || [];
  o.length > 0 && n({
    tracks: {
      items: o
    }
  }), t.formEl.addEventListener("submit", async e => {
    e.preventDefault();
    const a = t.inputEl.value.trim();
    if (!a) return t.inputEl.placeholder = "[error]", void console.error("[error]");
    t.spinBackEl.classList.remove("visually-hidden"), t.spinEl.classList.remove("visually-hidden"), t.inputEl.placeholder = "Type to search...";
    try {
      localStorage.clear(), await async function (e) {
        await fetch("/", {
          method: "POST",
          headers: {
            "Content-type": "application/json"
          },
          body: JSON.stringify({
            track: e
          })
        }).then(e => e.json()).then(e => n(e)).catch(e => console.error(e));
      }(a);
    } catch (e) {
      console.error("Search error:", e);
    } finally {
      t.spinBackEl.classList.add("visually-hidden"), t.spinEl.classList.add("visually-hidden");
    }
    t.formEl.reset();
  }), t.loginBtn.addEventListener("click", function () {
    const e = window.open("/auth/twitch"),
      t = setInterval(() => {
        if (e.closed) clearInterval(t);else try {
          if (e.location.href.includes("/auth/twitch/callback")) {
            const t = new URL(e.location.href).searchParams.get("code");
            e.close(), async function (e) {
              try {
                const t = await fetch(`/auth/twitch/callback?code=${e}`, {
                    method: "GET",
                    headers: {
                      "Content-type": "application/json"
                    }
                  }),
                  {
                    login: n,
                    code: o
                  } = await t.json();
                n && (localStorage.setItem("_code", o), localStorage.setItem("_login", n), a());
              } catch (e) {
                console.error(e);
              }
            }(t);
          }
        } catch (e) {
          console.error(e);
        }
      }, 1e3);
  }), window.addEventListener("load", a), window.addEventListener("resize", a);
})();